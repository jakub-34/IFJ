<CODE> -> <VARIABLE> ID <VARIABLE_CONTINUATION> ; <CODE>
<CODE> -> ID <ID_DEFINING> ; <CODE>
<CODE> -> if ( <EXPRESSION> ) <WHILE_IF_EXTENSION> { <CODE_SEQUENCE> } else { <CODE_SEQUENCE> } <CODE>
<CODE> -> while ( <EXPRESSION> ) <WHILE_IF_EXTENSION> { <CODE_SEQUENCE> } <CODE>
<CODE> -> pub fn ID ( <PARAM> ) <TYPE> { <CODE_SEQUENCE> } <CODE>
<CODE> -> EOF

<CODE_SEQUENCE> -> <VARIABLE> ID <VARIABLE_CONTINUATION> ; <CODE_SEQUENCE>
<CODE_SEQUENCE> -> ID <ID_DEFINING> ; <CODE_SEQUENCE>
<CODE_SEQUENCE> -> if ( <EXPRESSION> ) <WHILE_IF_EXTENSION> { <CODE_SEQUENCE> } else { <CODE_SEQUENCE> } <CODE_SEQUENCE>
<CODE_SEQUENCE> -> while ( <EXPRESSION> ) <WHILE_IF_EXTENSION> { <CODE_SEQUENCE> } <CODE_SEQUENCE>
<CODE_SEQUENCE> -> <FUNC_EXTENSION>
<CODE_SEQUENCE> -> ε

<VARIABLE_CONTINUATION> -> : <TYPE> = <NEXT_VARIABLE_CONTINUATION>
<VARIABLE_CONTINUATION> -> = <NEXT_VARIABLE_CONTINUATION>

<NEXT_VARIABLE_CONTINUATION> -> <EXPRESSION>
<NEXT_VARIABLE_CONTINUATION> -> ID ( <IN_PARAM> )

<ID_DEFINING> -> = <NEXT_ID_DEFINING>
<ID_DEFINING> -> ( <IN_PARAM> )

<NEXT_ID_DEFINING> -> ID ( <IN_PARAM> )
<NEXT_ID_DEFINING> -> <EXPRESSION>

<WHILE_IF_EXTENSION> -> ε
<WHILE_IF_EXTENSION> -> | ID |

<FUNC_EXTENSION> -> ε
<FUNC_EXTENSION> -> return <RETURN_VALUE> ;

<RETURN_VALUE> -> ε
<RETURN_VALUE> -> <EXPRESSION>

<VARIABLE> -> var
<VARIABLE> -> const

<PARAM> -> ID : <TYPE> <PARAM_CONTINUATION>
<PARAM> -> ε
<PARAM_CONTINUATION> -> , <PARAM>
<PARAM_CONTINUATION> -> ε

<IN_PARAM> -> ID <IN_PARAM_CONTINUATION>
<IN_PARAM> -> <TERM> <IN_PARAM_CONTINUATION>
<IN_PARAM> -> ε

<IN_PARAM_CONTINUATION> -> , <IN_PARAM>
<IN_PARAM_CONTINUATION> -> ε

<TYPE> -> i32
<TYPE> -> f64
<TYPE> -> []u8
<TYPE> -> ?i32
<TYPE> -> ?f64
<TYPE> -> ?[]u8

<TERM> -> nejaky_string
<TERM> -> nejaky_int
<TERM> -> nejaky_float
<TERM> -> NULL